<?php

namespace App\Tests\Entity;

use App\Entity\User;
use App\Entity\Booking;
use PHPUnit\Framework\TestCase;

final class UserTest extends TestCase
{
    public function testApiTokenIsAutoGeneratedAndLooksHex(): void
    {
        $u = new User();
        $token = $u->getApiToken();

        $this->assertNotNull($token);
        $this->assertSame(40, strlen($token), 'token length should be 40 hex chars (20 bytes)');
        $this->assertMatchesRegularExpression('/^[a-f0-9]{40}$/', $token);
    }

    public function testRolesAlwaysContainRoleUser(): void
    {
        $u = new User();
        $u->setRoles([]); // force vide
        $this->assertContains('ROLE_USER', $u->getRoles());

        $u->setRoles(['ROLE_ADMIN']);
        $roles = $u->getRoles();
        $this->assertContains('ROLE_ADMIN', $roles);
        $this->assertContains('ROLE_USER', $roles);
        $this->assertCount(count(array_unique($roles)), $roles, 'no duplicates');
    }

    public function testSettersAreTypeSafe(): void
    {
        $u = new User();
        $u->setFirstName('AmÃ©lie');
        $u->setLastName('Durand');
        $u->setGuestNumber(4);
        $u->setAllergy(null);

        $this->assertSame('AmÃ©lie', $u->getFirstName());
        $this->assertSame('Durand', $u->getLastName());
        $this->assertSame(4, $u->getGuestNumber());
        $this->assertNull($u->getAllergy());
    }

    public function testAddRemoveBookingKeepInverseSideInSync(): void
    {
        $u = new User();
        $b = new Booking();

        $u->addBooking($b);
        $this->assertTrue($u->getBookings()->contains($b));
        $this->assertSame($u, $b->getClient());

        $u->removeBooking($b);
        $this->assertFalse($u->getBookings()->contains($b));
        $this->assertNull($b->getClient());
    }
}
